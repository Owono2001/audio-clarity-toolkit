# render.yaml
# This is a blueprint for deploying the Audio Clarity Toolkit on Render.

services:
  # 1. Redis Instance (for Celery Broker and Result Backend)
  - type: redis
    name: audio-clarity-redis
    region: oregon # Choose a region close to you or your users
    plan: free # Or a paid plan for more resources/persistence
    ipAllowList: ["0.0.0.0/0"] # Allows all IPs, suitable for internal services
    # maxmemoryPolicy: allkeys-lru # Good for cache/Celery, Render may set a default

  # 2. Web Service (Flask Application with Gunicorn)
  - type: web
    name: audio-clarity-web
    env: docker # Specifies that we are using a Dockerfile
    region: oregon
    plan: free # Or a starter/standard plan for more resources
    # healthCheckPath: / # A simple health check endpoint (Render pings this)
    # autoDeploy: true # Optional: automatically redeploy on pushes to your Git repo's main branch
    dockerfilePath: ./Dockerfile # Explicitly state Dockerfile path
    dockerContext: .            # Explicitly state Docker build context
    envVars:
      - key: PYTHON_VERSION 
        value: "3.10" 
      - key: FLASK_ENV
        value: production
      - key: FLASK_DEBUG
        value: "0" 
      - key: SECRET_KEY
        generateValue: true 
      - key: CELERY_BROKER_URL
        fromService: 
          type: redis
          name: audio-clarity-redis
          property: connectionString
      - key: CELERY_RESULT_BACKEND
        fromService: 
          type: redis
          name: audio-clarity-redis
          property: connectionString
      - key: CLEANUP_MAX_FILE_AGE_DAYS
        value: "7" 
    # The start command is now defined by the CMD in your Dockerfile for the web service.
    # Example CMD in Dockerfile for web service:
    # CMD ["gunicorn", "--bind", "0.0.0.0:5000", "--workers", "2", "--threads", "2", "--timeout", "120", "app:create_app()"]
    # Render will inject the $PORT variable, so Gunicorn should bind to 0.0.0.0:$PORT
    # The Dockerfile's CMD should be:
    # CMD gunicorn --bind 0.0.0.0:$PORT --workers 2 --threads 2 --timeout 120 app:create_app()

  # 3. Background Worker (Celery)
  - type: worker
    name: audio-clarity-celery
    env: docker
    region: oregon
    plan: free 
    # autoDeploy: true
    dockerfilePath: ./Dockerfile # Uses the same Dockerfile
    dockerContext: .
    dockerCommand: "celery -A celery_worker.celery_app worker -l info -P eventlet -B --concurrency=2" # Overrides Dockerfile's CMD for this worker service
    envVars:
      - key: PYTHON_VERSION
        value: "3.10"
      - key: FLASK_ENV 
        value: production
      - key: SECRET_KEY 
        fromService:
          type: web
          name: audio-clarity-web
          envVarKey: SECRET_KEY
      - key: CELERY_BROKER_URL
        fromService:
          type: redis
          name: audio-clarity-redis
          property: connectionString
      - key: CELERY_RESULT_BACKEND
        fromService:
          type: redis
          name: audio-clarity-redis
          property: connectionString
      - key: CLEANUP_MAX_FILE_AGE_DAYS
        value: "7"
    # -B runs Beat scheduler in the same process. Concurrency can be adjusted.
    # For free tier, keep concurrency low.
